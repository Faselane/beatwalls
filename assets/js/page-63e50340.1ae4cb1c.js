(window.webpackJsonp=window.webpackJsonp||[]).push([[380],{873:function(t,e,r){"use strict";r.r(e);var n=r(25),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("//"),r("RouterLink",{attrs:{to:"/reference/beatwalls/"}},[t._v("beatwalls")]),t._v("/"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/"}},[t._v("structure.wallStructures")]),t._v("/"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/"}},[t._v("Define")])],1),t._v(" "),r("h1",{attrs:{id:"define"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#define"}},[t._v("#")]),t._v(" Define")]),t._v(" "),r("p",[t._v("[JVM]")]),t._v(" "),r("p",[t._v("Define your own WallStructure from existing WallStructures.")]),t._v(" "),r("p",[r("s",[t._v("class")]),t._v(" "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/"}},[r("s",[t._v("Define")])]),t._v(" "),r("s",[t._v(":")]),t._v(" "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-structure/"}},[r("s",[t._v("WallStructure")])])],1),t._v(" "),r("h2",{attrs:{id:"constructors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#constructors"}},[t._v("#")]),t._v(" Constructors")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Name")]),t._v(" "),r("th",[t._v("Summary")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/-define.html"}},[t._v("Define")])],1),t._v(" "),r("td",[t._v("[JVM] fun "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/-define.html"}},[t._v("Define")]),t._v("()   "),r("br")],1)])])]),t._v(" "),r("h2",{attrs:{id:"functions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Name")]),t._v(" "),r("th",[t._v("Summary")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("adjust")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun adjust(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(")  "),r("br"),t._v("override fun adjust(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("color")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun color(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-structure/create-objects.html"}},[t._v("createObjects")])],1),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("open override fun "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-structure/create-objects.html"}},[t._v("createObjects")]),t._v("(): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/create-walls.html"}},[t._v("createWalls")])],1),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Brief description  "),r("br"),r("br"),r("br"),t._v("generating the Walls"),r("br"),r("br"),t._v(" "),r("br"),t._v("Content  "),r("br"),t._v("open override fun "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/create-walls.html"}},[t._v("createWalls")]),t._v("(): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-nothing/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nothing"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/equals.html"}},[t._v("equals")])],1),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("open operator override fun "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/equals.html"}},[t._v("equals")]),t._v("(other: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Any"),r("OutboundLink")],1),t._v("?): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("fit")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun fit(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(")  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("fitPos")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun fitPos(fit: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(", scale: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")])]),t._v(" "),r("tr",[r("td",[t._v("fitScale")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun fitScale(pos: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(", scale: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(", fit: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")])]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/hash-code.html"}},[t._v("hashCode")])],1),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("open override fun "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/hash-code.html"}},[t._v("hashCode")]),t._v("(): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("mirror")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun mirror(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v("): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("mirrorX")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun mirrorX(list: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/name.html"}},[t._v("name")])],1),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Brief description  "),r("br"),r("br"),r("br"),t._v("returns the name of the structure"),r("br"),r("br"),t._v(" "),r("br"),t._v("Content  "),r("br"),t._v("open override fun "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/name.html"}},[t._v("name")]),t._v("(): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("noodle")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun noodle(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("reverse")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun reverse(list: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">)  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("rotate")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun rotate(o: "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[t._v("speedUp")]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("override fun speedUp(l: "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">)  "),r("br"),r("br"),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/to-string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("toString"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("[JVM]  "),r("br"),t._v("Content  "),r("br"),t._v("open override fun "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/to-string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("toString"),r("OutboundLink")],1),t._v("(): "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String"),r("OutboundLink")],1),t._v(" "),r("br"),r("br"),r("br")])])])]),t._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Name")]),t._v(" "),r("th",[t._v("Summary")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addDuration/#/PointingToDeclaration/"}},[t._v("addDuration")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addDuration/#/PointingToDeclaration/"}},[t._v("addDuration")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addHeight/#/PointingToDeclaration/"}},[t._v("addHeight")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addHeight/#/PointingToDeclaration/"}},[t._v("addHeight")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addWidth/#/PointingToDeclaration/"}},[t._v("addWidth")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addWidth/#/PointingToDeclaration/"}},[t._v("addWidth")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addX/#/PointingToDeclaration/"}},[t._v("addX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addX/#/PointingToDeclaration/"}},[t._v("addX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addY/#/PointingToDeclaration/"}},[t._v("addY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addY/#/PointingToDeclaration/"}},[t._v("addY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addZ/#/PointingToDeclaration/"}},[t._v("addZ")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/addZ/#/PointingToDeclaration/"}},[t._v("addZ")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/beat/#/PointingToDeclaration/"}},[t._v("beat")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("Beat the of the structure in the map. This takes BPM changes into account"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/beat/#/PointingToDeclaration/"}},[t._v("beat")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeDuration/#/PointingToDeclaration/"}},[t._v("changeDuration")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("change The Duration of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeDuration/#/PointingToDeclaration/"}},[t._v("changeDuration")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeHeight/#/PointingToDeclaration/"}},[t._v("changeHeight")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("change The Height of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeHeight/#/PointingToDeclaration/"}},[t._v("changeHeight")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeWidth/#/PointingToDeclaration/"}},[t._v("changeWidth")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("change the Width of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeWidth/#/PointingToDeclaration/"}},[t._v("changeWidth")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeX/#/PointingToDeclaration/"}},[t._v("changeX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("change The StartRow of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeX/#/PointingToDeclaration/"}},[t._v("changeX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeY/#/PointingToDeclaration/"}},[t._v("changeY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("change The StartHeight of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeY/#/PointingToDeclaration/"}},[t._v("changeY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeZ/#/PointingToDeclaration/"}},[t._v("changeZ")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("change The StartTime of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/changeZ/#/PointingToDeclaration/"}},[t._v("changeZ")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/color/#/PointingToDeclaration/"}},[t._v("color")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),r("br"),r("br"),t._v("The Color of the Wallstructure. Click me to see examples"),r("br"),r("br"),t._v("color: red  "),r("br"),t._v("turns the entire Wallstructure red.  "),r("br"),t._v("All available colors are here: https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html  "),r("br"),t._v(" "),r("br"),t._v("creates a rainbow 😃  "),r("br"),t._v("color: rainbow  "),r("br"),t._v(" "),r("br"),t._v("also creates a rainbow 😃, but this one changes 1.5 times as fast as the default one  "),r("br"),t._v("color: rainbow(1.5)  "),r("br"),t._v(" "),r("br"),t._v("Picks a random color for each wall  "),r("br"),t._v("color: random(blue,Green,cyan)  "),r("br"),t._v(" "),r("br"),t._v("changes color in the order red, green, blue, yellow.  "),r("br"),t._v("color: flash(red, green, blue, yellow)  "),r("br"),t._v(" "),r("br"),t._v("gradient from Red to Furry))  "),r("br"),t._v("color: gradient(Red,Cyan)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/color/#/PointingToDeclaration/"}},[t._v("color")]),t._v(": "),r("RouterLink",{attrs:{to:"/reference/beatwalls/types/-bw-color/"}},[t._v("BwColor")]),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fake/#/PointingToDeclaration/"}},[t._v("fake")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("When true, causes the note/wall to not show up in the note/wall count and to not count towards score in any way Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fake/#/PointingToDeclaration/"}},[t._v("fake")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fitX/#/PointingToDeclaration/"}},[t._v("fitX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("increases or decreases the width of all walls until they have the the specific startTime. Random possible with random(min,max). default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fitX/#/PointingToDeclaration/"}},[t._v("fitX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fitY/#/PointingToDeclaration/"}},[t._v("fitY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("increases or decreases the height of all walls until they have the the specific startHeight. Random possible with random(min,max). default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fitY/#/PointingToDeclaration/"}},[t._v("fitY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fitZ/#/PointingToDeclaration/"}},[t._v("fitZ")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("increases or decreases the duration of all walls until they have the the specific startTime. Random possible with random(min,max). default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/fitZ/#/PointingToDeclaration/"}},[t._v("fitZ")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/gravity/#/PointingToDeclaration/"}},[t._v("gravity")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("When false, notes will no longer do their animation where they float up. Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md Opposite of original value, default: true"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/gravity/#/PointingToDeclaration/"}},[t._v("gravity")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/interactable/#/PointingToDeclaration/"}},[t._v("interactable")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("When false, the note/wall cannot be interacted with. This means notes cannot be cut and walls will not interact with sabers/putting your head in the wall. Notes will still count towards your score. Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/interactable/#/PointingToDeclaration/"}},[t._v("interactable")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/isTopLevel/#/PointingToDeclaration/"}},[t._v("isTopLevel")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("dont touch"),r("br"),r("br"),t._v("var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/isTopLevel/#/PointingToDeclaration/"}},[t._v("isTopLevel")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/localRotX/#/PointingToDeclaration/"}},[t._v("localRotX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("localRotX controls the rotation on the x-axis for each individual wall in degree. allows random. Default: 0"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/localRotX/#/PointingToDeclaration/"}},[t._v("localRotX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/localRotY/#/PointingToDeclaration/"}},[t._v("localRotY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("localRotY controls the rotation on the y-axis for each individual Wall in degree. allows random. Default: 0"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/localRotY/#/PointingToDeclaration/"}},[t._v("localRotY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/localRotZ/#/PointingToDeclaration/"}},[t._v("localRotZ")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("ul",[r("li",[t._v("localRotZ controls the rotation on the x-axis for each individual Wall in degree. allows random. Default: 0")])]),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/localRotZ/#/PointingToDeclaration/"}},[t._v("localRotZ")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirror/#/PointingToDeclaration/"}},[t._v("mirror")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),r("br"),r("br"),t._v("mirrors the SpookyWall. Default: 0. click me:"),r("br"),r("br"),r("br"),r("br"),t._v("0 -> dont mirror,"),r("br"),r("br"),r("br"),r("br"),t._v("1-> mirror to the other side,"),r("br"),r("br"),r("br"),r("br"),t._v("2-> mirror to the other side and duplicate,"),r("br"),r("br"),r("br"),r("br"),t._v("3-> mirror horizontal on y=2"),r("br"),r("br"),r("br"),r("br"),t._v("4-> mirror horizontal and duplicate"),r("br"),r("br"),r("br"),r("br"),t._v("5-> mirror on the center of x=0, y=2"),r("br"),r("br"),r("br"),r("br"),t._v("6-> mirror on the center and duplicate"),r("br"),r("br"),r("br"),r("br"),t._v("7-> mirror 1 and 6"),r("br"),r("br"),r("br"),r("br"),t._v("8-> mirror on the center and on the other side and duplicate all 4"),r("br"),r("br"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirror/#/PointingToDeclaration/"}},[t._v("mirror")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirrorRotation/#/PointingToDeclaration/"}},[t._v("mirrorRotation")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("Defines, if mirror also effects the rotation. Can be true or false. Default: true"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirrorRotation/#/PointingToDeclaration/"}},[t._v("mirrorRotation")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirrorX/#/PointingToDeclaration/"}},[t._v("mirrorX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("The x Position used for mirror. Default: 0"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirrorX/#/PointingToDeclaration/"}},[t._v("mirrorX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirrorY/#/PointingToDeclaration/"}},[t._v("mirrorY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("The Y Position used for mirror. Default: 2"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/mirrorY/#/PointingToDeclaration/"}},[t._v("mirrorY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/name.html"}},[t._v("name")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("the name the structure gets saved to"),r("br"),r("br"),t._v("var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/name.html"}},[t._v("name")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/noteJumpMovementSpeed/#/PointingToDeclaration/"}},[t._v("noteJumpMovementSpeed")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("Set the NJS of all walls. Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/noteJumpMovementSpeed/#/PointingToDeclaration/"}},[t._v("noteJumpMovementSpeed")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/noteJumpStartBeatOffset/#/PointingToDeclaration/"}},[t._v("noteJumpStartBeatOffset")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("Set the spawn offset of an individual object Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/noteJumpStartBeatOffset/#/PointingToDeclaration/"}},[t._v("noteJumpStartBeatOffset")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/repeat/#/PointingToDeclaration/"}},[t._v("repeat")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),r("br"),r("br"),t._v("Repeats the Structure c times. You can change variables supporting repeat by using the variable 'c' in your expressions"),r("br"),r("br"),r("br"),r("br"),t._v("beat: 10 + c"),r("br"),r("br"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/repeat/#/PointingToDeclaration/"}},[t._v("repeat")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/reverseX/#/PointingToDeclaration/"}},[t._v("reverseX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("basically mirrors the Wallstructure in itself on the x-Achsis if set to true."),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/reverseX/#/PointingToDeclaration/"}},[t._v("reverseX")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/reverseY/#/PointingToDeclaration/"}},[t._v("reverseY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("basically mirrors the Wallstructure in itself on the x-Achsis if set to true"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/reverseY/#/PointingToDeclaration/"}},[t._v("reverseY")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/rotationX/#/PointingToDeclaration/"}},[t._v("rotationX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("The rotation of the wallstructure around the player, think 360 maps around the X Achsis. Other interesting Properties: mirrorRotation -> controls if mirror also effects the rotation(true,false)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/rotationX/#/PointingToDeclaration/"}},[t._v("rotationX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/rotationY/#/PointingToDeclaration/"}},[t._v("rotationY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("The rotation of the wallstructure around the player, think 360 maps around the X Achsis. Other interesting Properties: mirrorRotation -> controls if mirror also effects the rotation(true,false)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/rotationY/#/PointingToDeclaration/"}},[t._v("rotationY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/rotationZ/#/PointingToDeclaration/"}},[t._v("rotationZ")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("The rotation of the wallstructure around the player, think 360 maps around the X Achsis. Other interesting Properties: mirrorRotation -> controls if mirror also effects the rotation(true,false)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/rotationZ/#/PointingToDeclaration/"}},[t._v("rotationZ")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scale/#/PointingToDeclaration/"}},[t._v("scale")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("scales the Duration and startTime, (duration only for positive duration). This is useful for making a structure, that is one beat long longer or shorter"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scale/#/PointingToDeclaration/"}},[t._v("scale")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleDuration/#/PointingToDeclaration/"}},[t._v("scaleDuration")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("multiplies the Duration of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleDuration/#/PointingToDeclaration/"}},[t._v("scaleDuration")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleHeight/#/PointingToDeclaration/"}},[t._v("scaleHeight")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("multiplies the Height of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleHeight/#/PointingToDeclaration/"}},[t._v("scaleHeight")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleWidth/#/PointingToDeclaration/"}},[t._v("scaleWidth")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("multiplies the Width of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleWidth/#/PointingToDeclaration/"}},[t._v("scaleWidth")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleX/#/PointingToDeclaration/"}},[t._v("scaleX")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("multiplies the StartRow of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleX/#/PointingToDeclaration/"}},[t._v("scaleX")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleY/#/PointingToDeclaration/"}},[t._v("scaleY")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("multiplies the StartHeight of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleY/#/PointingToDeclaration/"}},[t._v("scaleY")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleZ/#/PointingToDeclaration/"}},[t._v("scaleZ")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("multiplies the StartTime of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/scaleZ/#/PointingToDeclaration/"}},[t._v("scaleZ")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v(" "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/seed/#/PointingToDeclaration/"}},[t._v("seed")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("some Wallstructures use Random walls. This is the seed for them"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/seed/#/PointingToDeclaration/"}},[t._v("seed")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/speeder/#/PointingToDeclaration/"}},[t._v("speeder")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),r("br"),r("br"),t._v("speeds up the wallstructure over time. the duration of the whole structure. Remains. \\n"),r("br"),r("br"),r("br"),r("br"),t._v("value 0-1 start is slower, speed up over time, \\n"),r("br"),r("br"),r("br"),r("br"),t._v("1-100 start is faster, slow down over time \\n"),r("br"),r("br"),r("br"),r("br"),t._v("The closer the value is to 1, the more stale it gets."),r("br"),r("br"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/speeder/#/PointingToDeclaration/"}},[t._v("speeder")]),t._v(": () -> "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),r("OutboundLink")],1),t._v("?   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/structures/#/PointingToDeclaration/"}},[t._v("structures")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("The name of Different Structures. Separated by comma (example: structures: Floor, Ceiling) You can also define Parameters of the first Structure These get loaded in Order, So if your reference defined Structures, those must be listed before that The Beat Value gets every time, so it should be 0 most of the time"),r("br"),r("br"),t._v("var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/structures/#/PointingToDeclaration/"}},[t._v("structures")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),r("OutboundLink")],1),t._v("<"),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-structure/"}},[t._v("WallStructure")]),t._v(">   "),r("br")],1)]),t._v(" "),r("tr",[r("td",[r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/track/#/PointingToDeclaration/"}},[t._v("track")])],1),t._v(" "),r("td",[t._v("[JVM] "),r("br"),r("br"),t._v("Assign all Objects in this Wallstructure to a specific Track"),r("br"),r("br"),t._v("override var "),r("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-define/#structure.wallStructures/Define/track/#/PointingToDeclaration/"}},[t._v("track")]),t._v(": "),r("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String"),r("OutboundLink")],1),t._v("?   "),r("br")],1)])])])])}),[],!1,null,null,null);e.default=a.exports}}]);