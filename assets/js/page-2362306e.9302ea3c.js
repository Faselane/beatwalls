(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{875:function(t,r,e){"use strict";e.r(r);var l=e(25),n=Object(l.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("//"),e("RouterLink",{attrs:{to:"/reference/beatwalls/"}},[t._v("beatwalls")]),t._v("/"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/"}},[t._v("structure.wallStructures")]),t._v("/"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/"}},[t._v("Line")])],1),t._v(" "),e("h1",{attrs:{id:"line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#line"}},[t._v("#")]),t._v(" Line")]),t._v(" "),e("p",[t._v("[JVM]")]),t._v(" "),e("p",[t._v("Draws a wall of line between the 2 provided Points")]),t._v(" "),e("p",[t._v("class "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/"}},[t._v("Line")]),t._v(" : "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-path/"}},[t._v("WallPath")])],1),t._v(" "),e("h2",{attrs:{id:"constructors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constructors"}},[t._v("#")]),t._v(" Constructors")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/-line.html"}},[t._v("Line")])],1),t._v(" "),e("td",[t._v("[JVM] fun "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/-line.html"}},[t._v("Line")]),t._v("()   "),e("br")],1)])])]),t._v(" "),e("h2",{attrs:{id:"functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("adjust")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun adjust(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(")  "),e("br"),t._v("override fun adjust(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("color")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun color(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-structure/create-objects.html"}},[t._v("createObjects")])],1),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("open override fun "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-wall-structure/create-objects.html"}},[t._v("createObjects")]),t._v("(): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),e("OutboundLink")],1),t._v("<"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("equals"),e("OutboundLink")],1)]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("open operator override fun "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("equals"),e("OutboundLink")],1),t._v("(other: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Any"),e("OutboundLink")],1),t._v("?): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br"),e("br"),e("br")])]),t._v(" "),e("tr",[e("td",[t._v("fit")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun fit(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(")  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("fitPos")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun fitPos(fit: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(", scale: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br"),e("br"),e("br")])]),t._v(" "),e("tr",[e("td",[t._v("fitScale")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun fitScale(pos: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(", scale: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(", fit: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br"),e("br"),e("br")])]),t._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/hash-code.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("hashCode"),e("OutboundLink")],1)]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("open override fun "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/hash-code.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("hashCode"),e("OutboundLink")],1),t._v("(): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),e("OutboundLink")],1),t._v(" "),e("br"),e("br"),e("br")])]),t._v(" "),e("tr",[e("td",[t._v("mirror")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun mirror(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v("): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),e("OutboundLink")],1),t._v("<"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("mirrorX")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun mirrorX(list: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),e("OutboundLink")],1),t._v("<"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),e("OutboundLink")],1),t._v("<"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("noodle")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun noodle(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("reverse")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun reverse(list: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),e("OutboundLink")],1),t._v("<"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">)  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("rotate")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun rotate(o: "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-object/"}},[t._v("BwObject")]),t._v(")  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[t._v("speedUp")]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("override fun speedUp(l: "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("List"),e("OutboundLink")],1),t._v("<"),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.bwElements/-bw-obstacle/"}},[t._v("BwObstacle")]),t._v(">)  "),e("br"),e("br"),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/to-string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("toString"),e("OutboundLink")],1)]),t._v(" "),e("td",[t._v("[JVM]  "),e("br"),t._v("Content  "),e("br"),t._v("open override fun "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/to-string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("toString"),e("OutboundLink")],1),t._v("(): "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String"),e("OutboundLink")],1),t._v(" "),e("br"),e("br"),e("br")])])])]),t._v(" "),e("h2",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addDuration/#/PointingToDeclaration/"}},[t._v("addDuration")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addDuration/#/PointingToDeclaration/"}},[t._v("addDuration")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addHeight/#/PointingToDeclaration/"}},[t._v("addHeight")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addHeight/#/PointingToDeclaration/"}},[t._v("addHeight")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addWidth/#/PointingToDeclaration/"}},[t._v("addWidth")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addWidth/#/PointingToDeclaration/"}},[t._v("addWidth")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addX/#/PointingToDeclaration/"}},[t._v("addX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addX/#/PointingToDeclaration/"}},[t._v("addX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addY/#/PointingToDeclaration/"}},[t._v("addY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addY/#/PointingToDeclaration/"}},[t._v("addY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addZ/#/PointingToDeclaration/"}},[t._v("addZ")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("adds the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/addZ/#/PointingToDeclaration/"}},[t._v("addZ")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/amount/#/PointingToDeclaration/"}},[t._v("amount")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("TODO find good default"),e("br"),e("br"),t._v("open override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/amount/#/PointingToDeclaration/"}},[t._v("amount")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/beat/#/PointingToDeclaration/"}},[t._v("beat")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("Beat the of the structure in the map. This takes BPM changes into account"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/beat/#/PointingToDeclaration/"}},[t._v("beat")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeDuration/#/PointingToDeclaration/"}},[t._v("changeDuration")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("change The Duration of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeDuration/#/PointingToDeclaration/"}},[t._v("changeDuration")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeHeight/#/PointingToDeclaration/"}},[t._v("changeHeight")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("change The Height of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeHeight/#/PointingToDeclaration/"}},[t._v("changeHeight")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeWidth/#/PointingToDeclaration/"}},[t._v("changeWidth")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("change the Width of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeWidth/#/PointingToDeclaration/"}},[t._v("changeWidth")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeX/#/PointingToDeclaration/"}},[t._v("changeX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("change The StartRow of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeX/#/PointingToDeclaration/"}},[t._v("changeX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeY/#/PointingToDeclaration/"}},[t._v("changeY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("change The StartHeight of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeY/#/PointingToDeclaration/"}},[t._v("changeY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeZ/#/PointingToDeclaration/"}},[t._v("changeZ")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("change The StartTime of all Walls in the structure to the given Value. Random possible with random(min,max). Default: null"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/changeZ/#/PointingToDeclaration/"}},[t._v("changeZ")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/color/#/PointingToDeclaration/"}},[t._v("color")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),e("br"),e("br"),t._v("The Color of the Wallstructure. Click me to see examples"),e("br"),e("br"),t._v("color: red  "),e("br"),t._v("turns the entire Wallstructure red.  "),e("br"),t._v("All available colors are here: https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html  "),e("br"),t._v(" "),e("br"),t._v("creates a rainbow 😃  "),e("br"),t._v("color: rainbow  "),e("br"),t._v(" "),e("br"),t._v("also creates a rainbow 😃, but this one changes 1.5 times as fast as the default one  "),e("br"),t._v("color: rainbow(1.5)  "),e("br"),t._v(" "),e("br"),t._v("Picks a random color for each wall  "),e("br"),t._v("color: random(blue,Green,cyan)  "),e("br"),t._v(" "),e("br"),t._v("changes color in the order red, green, blue, yellow.  "),e("br"),t._v("color: flash(red, green, blue, yellow)  "),e("br"),t._v(" "),e("br"),t._v("gradient from Red to Furry))  "),e("br"),t._v("color: gradient(Red,Cyan)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/color/#/PointingToDeclaration/"}},[t._v("color")]),t._v(": "),e("RouterLink",{attrs:{to:"/reference/beatwalls/types/-bw-color/"}},[t._v("BwColor")]),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fake/#/PointingToDeclaration/"}},[t._v("fake")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("When true, causes the note/wall to not show up in the note/wall count and to not count towards score in any way Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fake/#/PointingToDeclaration/"}},[t._v("fake")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fitX/#/PointingToDeclaration/"}},[t._v("fitX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("increases or decreases the width of all walls until they have the the specific startTime. Random possible with random(min,max). default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fitX/#/PointingToDeclaration/"}},[t._v("fitX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fitY/#/PointingToDeclaration/"}},[t._v("fitY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("increases or decreases the height of all walls until they have the the specific startHeight. Random possible with random(min,max). default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fitY/#/PointingToDeclaration/"}},[t._v("fitY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fitZ/#/PointingToDeclaration/"}},[t._v("fitZ")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("increases or decreases the duration of all walls until they have the the specific startTime. Random possible with random(min,max). default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/fitZ/#/PointingToDeclaration/"}},[t._v("fitZ")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/gravity/#/PointingToDeclaration/"}},[t._v("gravity")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("When false, notes will no longer do their animation where they float up. Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md Opposite of original value, default: true"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/gravity/#/PointingToDeclaration/"}},[t._v("gravity")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/interactable/#/PointingToDeclaration/"}},[t._v("interactable")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("When false, the note/wall cannot be interacted with. This means notes cannot be cut and walls will not interact with sabers/putting your head in the wall. Notes will still count towards your score. Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/interactable/#/PointingToDeclaration/"}},[t._v("interactable")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/localRotX/#/PointingToDeclaration/"}},[t._v("localRotX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("localRotX controls the rotation on the x-axis for each individual wall in degree. allows random. Default: 0"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/localRotX/#/PointingToDeclaration/"}},[t._v("localRotX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/localRotY/#/PointingToDeclaration/"}},[t._v("localRotY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("localRotY controls the rotation on the y-axis for each individual Wall in degree. allows random. Default: 0"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/localRotY/#/PointingToDeclaration/"}},[t._v("localRotY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/localRotZ/#/PointingToDeclaration/"}},[t._v("localRotZ")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("ul",[e("li",[t._v("localRotZ controls the rotation on the x-axis for each individual Wall in degree. allows random. Default: 0")])]),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/localRotZ/#/PointingToDeclaration/"}},[t._v("localRotZ")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirror/#/PointingToDeclaration/"}},[t._v("mirror")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),e("br"),e("br"),t._v("mirrors the SpookyWall. Default: 0."),e("br"),e("br"),e("ul",[e("li",[t._v("0 -> dont mirror,")]),e("li",[t._v("1-> mirror to the other side,")]),e("li",[t._v("2-> mirror to the other side and duplicate,")]),e("li",[t._v("3-> mirror horizontal on y=2")]),e("li",[t._v("4-> mirror horizontal and duplicate")]),e("li",[t._v("5-> mirror on the center of x=0, y=2")]),e("li",[t._v("6-> mirror on the center and duplicate")]),e("li",[t._v("7-> mirror 1 and 6")]),e("li",[t._v("8-> mirror on the center and on the other side and duplicate all 4")])]),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirror/#/PointingToDeclaration/"}},[t._v("mirror")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirrorRotation/#/PointingToDeclaration/"}},[t._v("mirrorRotation")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("Defines, if mirror also effects the rotation. Can be true or false. Default: true"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirrorRotation/#/PointingToDeclaration/"}},[t._v("mirrorRotation")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirrorX/#/PointingToDeclaration/"}},[t._v("mirrorX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("The x Position used for mirror. Default: 0"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirrorX/#/PointingToDeclaration/"}},[t._v("mirrorX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirrorY/#/PointingToDeclaration/"}},[t._v("mirrorY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("The Y Position used for mirror. Default: 2"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/mirrorY/#/PointingToDeclaration/"}},[t._v("mirrorY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/noteJumpMovementSpeed/#/PointingToDeclaration/"}},[t._v("noteJumpMovementSpeed")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("Set the NJS of all walls. Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/noteJumpMovementSpeed/#/PointingToDeclaration/"}},[t._v("noteJumpMovementSpeed")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/noteJumpStartBeatOffset/#/PointingToDeclaration/"}},[t._v("noteJumpStartBeatOffset")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("Set the spawn offset of an individual object Part of NE: https://github.com/Aeroluna/NoodleExtensions/blob/master/README.md"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/noteJumpStartBeatOffset/#/PointingToDeclaration/"}},[t._v("noteJumpStartBeatOffset")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/p0/#/PointingToDeclaration/"}},[t._v("p0")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("The startPoint"),e("br"),e("br"),t._v("var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/p0/#/PointingToDeclaration/"}},[t._v("p0")]),t._v(": "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.math/-vec3/"}},[t._v("Vec3")]),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/p1/#/PointingToDeclaration/"}},[t._v("p1")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("the End Point"),e("br"),e("br"),t._v("var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/p1/#/PointingToDeclaration/"}},[t._v("p1")]),t._v(": "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.math/-vec3/"}},[t._v("Vec3")]),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/repeat/#/PointingToDeclaration/"}},[t._v("repeat")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),e("br"),e("br"),t._v("Repeats the Structure c times. You can change variables supporting repeat by using the variable 'c' in your expressions"),e("br"),e("br"),e("br"),e("br"),t._v("beat: 10 + c"),e("br"),e("br"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/repeat/#/PointingToDeclaration/"}},[t._v("repeat")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/reverseX/#/PointingToDeclaration/"}},[t._v("reverseX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("basically mirrors the Wallstructure in itself on the x-Achsis if set to true."),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/reverseX/#/PointingToDeclaration/"}},[t._v("reverseX")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/reverseY/#/PointingToDeclaration/"}},[t._v("reverseY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("basically mirrors the Wallstructure in itself on the x-Achsis if set to true"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/reverseY/#/PointingToDeclaration/"}},[t._v("reverseY")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/rotationX/#/PointingToDeclaration/"}},[t._v("rotationX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("The rotation of the wallstructure around the player, think 360 maps around the X Achsis. Other interesting Properties: mirrorRotation -> controls if mirror also effects the rotation(true,false)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/rotationX/#/PointingToDeclaration/"}},[t._v("rotationX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/rotationY/#/PointingToDeclaration/"}},[t._v("rotationY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("The rotation of the wallstructure around the player, think 360 maps around the X Achsis. Other interesting Properties: mirrorRotation -> controls if mirror also effects the rotation(true,false)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/rotationY/#/PointingToDeclaration/"}},[t._v("rotationY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/rotationZ/#/PointingToDeclaration/"}},[t._v("rotationZ")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("The rotation of the wallstructure around the player, think 360 maps around the X Achsis. Other interesting Properties: mirrorRotation -> controls if mirror also effects the rotation(true,false)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/rotationZ/#/PointingToDeclaration/"}},[t._v("rotationZ")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scale/#/PointingToDeclaration/"}},[t._v("scale")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("scales the Duration and startTime, (duration only for positive duration). This is useful for making a structure, that is one beat long longer or shorter"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scale/#/PointingToDeclaration/"}},[t._v("scale")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleDuration/#/PointingToDeclaration/"}},[t._v("scaleDuration")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("multiplies the Duration of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleDuration/#/PointingToDeclaration/"}},[t._v("scaleDuration")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleHeight/#/PointingToDeclaration/"}},[t._v("scaleHeight")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("multiplies the Height of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleHeight/#/PointingToDeclaration/"}},[t._v("scaleHeight")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleWidth/#/PointingToDeclaration/"}},[t._v("scaleWidth")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("multiplies the Width of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleWidth/#/PointingToDeclaration/"}},[t._v("scaleWidth")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleX/#/PointingToDeclaration/"}},[t._v("scaleX")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("multiplies the StartRow of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleX/#/PointingToDeclaration/"}},[t._v("scaleX")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleY/#/PointingToDeclaration/"}},[t._v("scaleY")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("multiplies the StartHeight of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleY/#/PointingToDeclaration/"}},[t._v("scaleY")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleZ/#/PointingToDeclaration/"}},[t._v("scaleZ")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("multiplies the StartTime of all Walls in the structure by the given Value. Random possible with random(min,max). Default: null (does nothing)"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/scaleZ/#/PointingToDeclaration/"}},[t._v("scaleZ")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v(" "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/seed/#/PointingToDeclaration/"}},[t._v("seed")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("some Wallstructures use Random walls. This is the seed for them"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/seed/#/PointingToDeclaration/"}},[t._v("seed")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Int"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/speeder/#/PointingToDeclaration/"}},[t._v("speeder")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),e("br"),e("br"),t._v("speeds up the wallstructure over time. the duration of the whole structure. Remains. \\n"),e("br"),e("br"),e("br"),e("br"),t._v("value 0-1 start is slower, speed up over time, \\n"),e("br"),e("br"),e("br"),e("br"),t._v("1-100 start is faster, slow down over time \\n"),e("br"),e("br"),e("br"),e("br"),t._v("The closer the value is to 1, the more stale it gets."),e("br"),e("br"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/speeder/#/PointingToDeclaration/"}},[t._v("speeder")]),t._v(": () -> "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/track/#/PointingToDeclaration/"}},[t._v("track")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("Assign all Objects in this Wallstructure to a specific Track"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/track/#/PointingToDeclaration/"}},[t._v("track")]),t._v(": "),e("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String"),e("OutboundLink")],1),t._v("?   "),e("br")],1)]),t._v(" "),e("tr",[e("td",[e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/type/#/PointingToDeclaration/"}},[t._v("type")])],1),t._v(" "),e("td",[t._v("[JVM] "),e("br"),e("br"),t._v("TODO Beschreibung"),e("br"),e("br"),t._v("override var "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.wallStructures/-line/#structure.wallStructures/Line/type/#/PointingToDeclaration/"}},[t._v("type")]),t._v(": "),e("RouterLink",{attrs:{to:"/reference/beatwalls/structure.math/-point-connection-type/"}},[t._v("PointConnectionType")]),t._v(" "),e("br")],1)])])])])}),[],!1,null,null,null);r.default=n.exports}}]);